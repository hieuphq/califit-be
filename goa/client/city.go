// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "califit-be Backend API": city Resource Client
//
// Command:
// $ goagen
// --design=github.com/hieuphq/califit-be/goa/design
// --out=$(GOPATH)/src/github.com/hieuphq/califit-be/goa
// --version=v1.4.0

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListCityPath computes a request path to the list action of city.
func ListCityPath() string {

	return fmt.Sprintf("/api/city")
}

// List cities
func (c *Client) ListCity(ctx context.Context, path string, limit *int, name *string, offset *int) (*http.Response, error) {
	req, err := c.NewListCityRequest(ctx, path, limit, name, offset)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCityRequest create the request corresponding to the list action endpoint of the city resource.
func (c *Client) NewListCityRequest(ctx context.Context, path string, limit *int, name *string, offset *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if limit != nil {
		tmp6 := strconv.Itoa(*limit)
		values.Set("limit", tmp6)
	}
	if name != nil {
		values.Set("name", *name)
	}
	if offset != nil {
		tmp7 := strconv.Itoa(*offset)
		values.Set("offset", tmp7)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowCityPath computes a request path to the show action of city.
func ShowCityPath(cityID string) string {
	param0 := cityID

	return fmt.Sprintf("/api/city/%s", param0)
}

// Get a city by ID
func (c *Client) ShowCity(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowCityRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowCityRequest create the request corresponding to the show action endpoint of the city resource.
func (c *Client) NewShowCityRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
