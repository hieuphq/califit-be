// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testImageMaps(t *testing.T) {
	t.Parallel()

	query := ImageMaps()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testImageMapsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageMap{}
	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ImageMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImageMapsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageMap{}
	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ImageMaps().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ImageMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImageMapsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageMap{}
	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ImageMapSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ImageMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImageMapsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageMap{}
	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ImageMapExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ImageMap exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ImageMapExists to return true, but got false.")
	}
}

func testImageMapsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageMap{}
	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	imageMapFound, err := FindImageMap(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if imageMapFound == nil {
		t.Error("want a record, got nil")
	}
}

func testImageMapsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageMap{}
	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ImageMaps().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testImageMapsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageMap{}
	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ImageMaps().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testImageMapsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	imageMapOne := &ImageMap{}
	imageMapTwo := &ImageMap{}
	if err = randomize.Struct(seed, imageMapOne, imageMapDBTypes, false, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}
	if err = randomize.Struct(seed, imageMapTwo, imageMapDBTypes, false, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = imageMapOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = imageMapTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ImageMaps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testImageMapsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	imageMapOne := &ImageMap{}
	imageMapTwo := &ImageMap{}
	if err = randomize.Struct(seed, imageMapOne, imageMapDBTypes, false, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}
	if err = randomize.Struct(seed, imageMapTwo, imageMapDBTypes, false, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = imageMapOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = imageMapTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func imageMapBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageMap) error {
	*o = ImageMap{}
	return nil
}

func imageMapAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageMap) error {
	*o = ImageMap{}
	return nil
}

func imageMapAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ImageMap) error {
	*o = ImageMap{}
	return nil
}

func imageMapBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ImageMap) error {
	*o = ImageMap{}
	return nil
}

func imageMapAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ImageMap) error {
	*o = ImageMap{}
	return nil
}

func imageMapBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ImageMap) error {
	*o = ImageMap{}
	return nil
}

func imageMapAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ImageMap) error {
	*o = ImageMap{}
	return nil
}

func imageMapBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageMap) error {
	*o = ImageMap{}
	return nil
}

func imageMapAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageMap) error {
	*o = ImageMap{}
	return nil
}

func testImageMapsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ImageMap{}
	o := &ImageMap{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, imageMapDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ImageMap object: %s", err)
	}

	AddImageMapHook(boil.BeforeInsertHook, imageMapBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	imageMapBeforeInsertHooks = []ImageMapHook{}

	AddImageMapHook(boil.AfterInsertHook, imageMapAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	imageMapAfterInsertHooks = []ImageMapHook{}

	AddImageMapHook(boil.AfterSelectHook, imageMapAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	imageMapAfterSelectHooks = []ImageMapHook{}

	AddImageMapHook(boil.BeforeUpdateHook, imageMapBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	imageMapBeforeUpdateHooks = []ImageMapHook{}

	AddImageMapHook(boil.AfterUpdateHook, imageMapAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	imageMapAfterUpdateHooks = []ImageMapHook{}

	AddImageMapHook(boil.BeforeDeleteHook, imageMapBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	imageMapBeforeDeleteHooks = []ImageMapHook{}

	AddImageMapHook(boil.AfterDeleteHook, imageMapAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	imageMapAfterDeleteHooks = []ImageMapHook{}

	AddImageMapHook(boil.BeforeUpsertHook, imageMapBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	imageMapBeforeUpsertHooks = []ImageMapHook{}

	AddImageMapHook(boil.AfterUpsertHook, imageMapAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	imageMapAfterUpsertHooks = []ImageMapHook{}
}

func testImageMapsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageMap{}
	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImageMapsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageMap{}
	if err = randomize.Struct(seed, o, imageMapDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(imageMapColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ImageMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImageMapToOneImageUsingImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ImageMap
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, imageMapDBTypes, true, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ImageID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Image().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ImageMapSlice{&local}
	if err = local.L.LoadImage(ctx, tx, false, (*[]*ImageMap)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Image == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Image = nil
	if err = local.L.LoadImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Image == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testImageMapToOneSetOpImageUsingImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ImageMap
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageMapDBTypes, false, strmangle.SetComplement(imageMapPrimaryKeyColumns, imageMapColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Image != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ImageMaps[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ImageID, x.ID) {
			t.Error("foreign key was wrong value", a.ImageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ImageID))
		reflect.Indirect(reflect.ValueOf(&a.ImageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ImageID, x.ID) {
			t.Error("foreign key was wrong value", a.ImageID, x.ID)
		}
	}
}

func testImageMapToOneRemoveOpImageUsingImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ImageMap
	var b Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageMapDBTypes, false, strmangle.SetComplement(imageMapPrimaryKeyColumns, imageMapColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetImage(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveImage(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Image().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Image != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ImageID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ImageMaps) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testImageMapsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageMap{}
	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testImageMapsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageMap{}
	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ImageMapSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testImageMapsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageMap{}
	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ImageMaps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	imageMapDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `ID`: `uuid`, `ImageID`: `uuid`, `Resource`: `character varying`, `ResourceID`: `uuid`, `UpdatedAt`: `timestamp with time zone`}
	_               = bytes.MinRead
)

func testImageMapsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(imageMapPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(imageMapColumns) == len(imageMapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ImageMap{}
	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testImageMapsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(imageMapColumns) == len(imageMapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ImageMap{}
	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, imageMapDBTypes, true, imageMapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(imageMapColumns, imageMapPrimaryKeyColumns) {
		fields = imageMapColumns
	} else {
		fields = strmangle.SetComplement(
			imageMapColumns,
			imageMapPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ImageMapSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testImageMapsUpsert(t *testing.T) {
	t.Parallel()

	if len(imageMapColumns) == len(imageMapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ImageMap{}
	if err = randomize.Struct(seed, &o, imageMapDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ImageMap: %s", err)
	}

	count, err := ImageMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, imageMapDBTypes, false, imageMapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ImageMap struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ImageMap: %s", err)
	}

	count, err = ImageMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
