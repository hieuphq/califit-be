// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testScheduleDetails(t *testing.T) {
	t.Parallel()

	query := ScheduleDetails()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testScheduleDetailsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScheduleDetail{}
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ScheduleDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testScheduleDetailsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScheduleDetail{}
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ScheduleDetails().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ScheduleDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testScheduleDetailsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScheduleDetail{}
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ScheduleDetailSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ScheduleDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testScheduleDetailsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScheduleDetail{}
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ScheduleDetailExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ScheduleDetail exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ScheduleDetailExists to return true, but got false.")
	}
}

func testScheduleDetailsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScheduleDetail{}
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	scheduleDetailFound, err := FindScheduleDetail(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if scheduleDetailFound == nil {
		t.Error("want a record, got nil")
	}
}

func testScheduleDetailsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScheduleDetail{}
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ScheduleDetails().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testScheduleDetailsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScheduleDetail{}
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ScheduleDetails().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testScheduleDetailsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleDetailOne := &ScheduleDetail{}
	scheduleDetailTwo := &ScheduleDetail{}
	if err = randomize.Struct(seed, scheduleDetailOne, scheduleDetailDBTypes, false, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, scheduleDetailTwo, scheduleDetailDBTypes, false, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = scheduleDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = scheduleDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ScheduleDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testScheduleDetailsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	scheduleDetailOne := &ScheduleDetail{}
	scheduleDetailTwo := &ScheduleDetail{}
	if err = randomize.Struct(seed, scheduleDetailOne, scheduleDetailDBTypes, false, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, scheduleDetailTwo, scheduleDetailDBTypes, false, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = scheduleDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = scheduleDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ScheduleDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func scheduleDetailBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ScheduleDetail) error {
	*o = ScheduleDetail{}
	return nil
}

func scheduleDetailAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ScheduleDetail) error {
	*o = ScheduleDetail{}
	return nil
}

func scheduleDetailAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ScheduleDetail) error {
	*o = ScheduleDetail{}
	return nil
}

func scheduleDetailBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ScheduleDetail) error {
	*o = ScheduleDetail{}
	return nil
}

func scheduleDetailAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ScheduleDetail) error {
	*o = ScheduleDetail{}
	return nil
}

func scheduleDetailBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ScheduleDetail) error {
	*o = ScheduleDetail{}
	return nil
}

func scheduleDetailAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ScheduleDetail) error {
	*o = ScheduleDetail{}
	return nil
}

func scheduleDetailBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ScheduleDetail) error {
	*o = ScheduleDetail{}
	return nil
}

func scheduleDetailAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ScheduleDetail) error {
	*o = ScheduleDetail{}
	return nil
}

func testScheduleDetailsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ScheduleDetail{}
	o := &ScheduleDetail{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail object: %s", err)
	}

	AddScheduleDetailHook(boil.BeforeInsertHook, scheduleDetailBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	scheduleDetailBeforeInsertHooks = []ScheduleDetailHook{}

	AddScheduleDetailHook(boil.AfterInsertHook, scheduleDetailAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	scheduleDetailAfterInsertHooks = []ScheduleDetailHook{}

	AddScheduleDetailHook(boil.AfterSelectHook, scheduleDetailAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	scheduleDetailAfterSelectHooks = []ScheduleDetailHook{}

	AddScheduleDetailHook(boil.BeforeUpdateHook, scheduleDetailBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	scheduleDetailBeforeUpdateHooks = []ScheduleDetailHook{}

	AddScheduleDetailHook(boil.AfterUpdateHook, scheduleDetailAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	scheduleDetailAfterUpdateHooks = []ScheduleDetailHook{}

	AddScheduleDetailHook(boil.BeforeDeleteHook, scheduleDetailBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	scheduleDetailBeforeDeleteHooks = []ScheduleDetailHook{}

	AddScheduleDetailHook(boil.AfterDeleteHook, scheduleDetailAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	scheduleDetailAfterDeleteHooks = []ScheduleDetailHook{}

	AddScheduleDetailHook(boil.BeforeUpsertHook, scheduleDetailBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	scheduleDetailBeforeUpsertHooks = []ScheduleDetailHook{}

	AddScheduleDetailHook(boil.AfterUpsertHook, scheduleDetailAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	scheduleDetailAfterUpsertHooks = []ScheduleDetailHook{}
}

func testScheduleDetailsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScheduleDetail{}
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ScheduleDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testScheduleDetailsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScheduleDetail{}
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(scheduleDetailColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ScheduleDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testScheduleDetailToOneScheduleUsingSchedule(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ScheduleDetail
	var foreign Schedule

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, scheduleDBTypes, false, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ScheduleID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Schedule().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ScheduleDetailSlice{&local}
	if err = local.L.LoadSchedule(ctx, tx, false, (*[]*ScheduleDetail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Schedule == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Schedule = nil
	if err = local.L.LoadSchedule(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Schedule == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testScheduleDetailToOneClassUsingClass(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ScheduleDetail
	var foreign Class

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, classDBTypes, false, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ClassID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Class().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ScheduleDetailSlice{&local}
	if err = local.L.LoadClass(ctx, tx, false, (*[]*ScheduleDetail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Class == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Class = nil
	if err = local.L.LoadClass(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Class == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testScheduleDetailToOneTrainerUsingTrainer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ScheduleDetail
	var foreign Trainer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, trainerDBTypes, false, trainerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trainer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TrainerID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Trainer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ScheduleDetailSlice{&local}
	if err = local.L.LoadTrainer(ctx, tx, false, (*[]*ScheduleDetail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Trainer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Trainer = nil
	if err = local.L.LoadTrainer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Trainer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testScheduleDetailToOneSetOpScheduleUsingSchedule(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ScheduleDetail
	var b, c Schedule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDetailDBTypes, false, strmangle.SetComplement(scheduleDetailPrimaryKeyColumns, scheduleDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, scheduleDBTypes, false, strmangle.SetComplement(schedulePrimaryKeyColumns, scheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, scheduleDBTypes, false, strmangle.SetComplement(schedulePrimaryKeyColumns, scheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Schedule{&b, &c} {
		err = a.SetSchedule(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Schedule != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ScheduleDetails[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ScheduleID, x.ID) {
			t.Error("foreign key was wrong value", a.ScheduleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ScheduleID))
		reflect.Indirect(reflect.ValueOf(&a.ScheduleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ScheduleID, x.ID) {
			t.Error("foreign key was wrong value", a.ScheduleID, x.ID)
		}
	}
}

func testScheduleDetailToOneRemoveOpScheduleUsingSchedule(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ScheduleDetail
	var b Schedule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDetailDBTypes, false, strmangle.SetComplement(scheduleDetailPrimaryKeyColumns, scheduleDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, scheduleDBTypes, false, strmangle.SetComplement(schedulePrimaryKeyColumns, scheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSchedule(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSchedule(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Schedule().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Schedule != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ScheduleID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ScheduleDetails) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testScheduleDetailToOneSetOpClassUsingClass(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ScheduleDetail
	var b, c Class

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDetailDBTypes, false, strmangle.SetComplement(scheduleDetailPrimaryKeyColumns, scheduleDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Class{&b, &c} {
		err = a.SetClass(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Class != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ScheduleDetails[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ClassID, x.ID) {
			t.Error("foreign key was wrong value", a.ClassID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ClassID))
		reflect.Indirect(reflect.ValueOf(&a.ClassID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ClassID, x.ID) {
			t.Error("foreign key was wrong value", a.ClassID, x.ID)
		}
	}
}

func testScheduleDetailToOneRemoveOpClassUsingClass(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ScheduleDetail
	var b Class

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDetailDBTypes, false, strmangle.SetComplement(scheduleDetailPrimaryKeyColumns, scheduleDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetClass(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveClass(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Class().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Class != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ClassID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ScheduleDetails) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testScheduleDetailToOneSetOpTrainerUsingTrainer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ScheduleDetail
	var b, c Trainer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDetailDBTypes, false, strmangle.SetComplement(scheduleDetailPrimaryKeyColumns, scheduleDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, trainerDBTypes, false, strmangle.SetComplement(trainerPrimaryKeyColumns, trainerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, trainerDBTypes, false, strmangle.SetComplement(trainerPrimaryKeyColumns, trainerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Trainer{&b, &c} {
		err = a.SetTrainer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Trainer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ScheduleDetails[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TrainerID, x.ID) {
			t.Error("foreign key was wrong value", a.TrainerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TrainerID))
		reflect.Indirect(reflect.ValueOf(&a.TrainerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TrainerID, x.ID) {
			t.Error("foreign key was wrong value", a.TrainerID, x.ID)
		}
	}
}

func testScheduleDetailToOneRemoveOpTrainerUsingTrainer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ScheduleDetail
	var b Trainer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDetailDBTypes, false, strmangle.SetComplement(scheduleDetailPrimaryKeyColumns, scheduleDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, trainerDBTypes, false, strmangle.SetComplement(trainerPrimaryKeyColumns, trainerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTrainer(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTrainer(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Trainer().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Trainer != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TrainerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ScheduleDetails) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testScheduleDetailsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScheduleDetail{}
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testScheduleDetailsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScheduleDetail{}
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ScheduleDetailSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testScheduleDetailsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ScheduleDetail{}
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ScheduleDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	scheduleDetailDBTypes = map[string]string{`ClassID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `EndAt`: `timestamp with time zone`, `ID`: `uuid`, `ScheduleID`: `uuid`, `StartAt`: `timestamp with time zone`, `TrainerID`: `uuid`, `UpdatedAt`: `timestamp with time zone`}
	_                     = bytes.MinRead
)

func testScheduleDetailsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(scheduleDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(scheduleDetailColumns) == len(scheduleDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ScheduleDetail{}
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ScheduleDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testScheduleDetailsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(scheduleDetailColumns) == len(scheduleDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ScheduleDetail{}
	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ScheduleDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, scheduleDetailDBTypes, true, scheduleDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(scheduleDetailColumns, scheduleDetailPrimaryKeyColumns) {
		fields = scheduleDetailColumns
	} else {
		fields = strmangle.SetComplement(
			scheduleDetailColumns,
			scheduleDetailPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ScheduleDetailSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testScheduleDetailsUpsert(t *testing.T) {
	t.Parallel()

	if len(scheduleDetailColumns) == len(scheduleDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ScheduleDetail{}
	if err = randomize.Struct(seed, &o, scheduleDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ScheduleDetail: %s", err)
	}

	count, err := ScheduleDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, scheduleDetailDBTypes, false, scheduleDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ScheduleDetail struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ScheduleDetail: %s", err)
	}

	count, err = ScheduleDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
