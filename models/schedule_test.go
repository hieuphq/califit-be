// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSchedules(t *testing.T) {
	t.Parallel()

	query := Schedules()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSchedulesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Schedule{}
	if err = randomize.Struct(seed, o, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Schedules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSchedulesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Schedule{}
	if err = randomize.Struct(seed, o, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Schedules().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Schedules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSchedulesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Schedule{}
	if err = randomize.Struct(seed, o, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ScheduleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Schedules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSchedulesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Schedule{}
	if err = randomize.Struct(seed, o, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ScheduleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Schedule exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ScheduleExists to return true, but got false.")
	}
}

func testSchedulesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Schedule{}
	if err = randomize.Struct(seed, o, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	scheduleFound, err := FindSchedule(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if scheduleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSchedulesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Schedule{}
	if err = randomize.Struct(seed, o, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Schedules().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSchedulesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Schedule{}
	if err = randomize.Struct(seed, o, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Schedules().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSchedulesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleOne := &Schedule{}
	scheduleTwo := &Schedule{}
	if err = randomize.Struct(seed, scheduleOne, scheduleDBTypes, false, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}
	if err = randomize.Struct(seed, scheduleTwo, scheduleDBTypes, false, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = scheduleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = scheduleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Schedules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSchedulesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	scheduleOne := &Schedule{}
	scheduleTwo := &Schedule{}
	if err = randomize.Struct(seed, scheduleOne, scheduleDBTypes, false, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}
	if err = randomize.Struct(seed, scheduleTwo, scheduleDBTypes, false, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = scheduleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = scheduleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Schedules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func scheduleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func testSchedulesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Schedule{}
	o := &Schedule{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, scheduleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Schedule object: %s", err)
	}

	AddScheduleHook(boil.BeforeInsertHook, scheduleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	scheduleBeforeInsertHooks = []ScheduleHook{}

	AddScheduleHook(boil.AfterInsertHook, scheduleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	scheduleAfterInsertHooks = []ScheduleHook{}

	AddScheduleHook(boil.AfterSelectHook, scheduleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	scheduleAfterSelectHooks = []ScheduleHook{}

	AddScheduleHook(boil.BeforeUpdateHook, scheduleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	scheduleBeforeUpdateHooks = []ScheduleHook{}

	AddScheduleHook(boil.AfterUpdateHook, scheduleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	scheduleAfterUpdateHooks = []ScheduleHook{}

	AddScheduleHook(boil.BeforeDeleteHook, scheduleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	scheduleBeforeDeleteHooks = []ScheduleHook{}

	AddScheduleHook(boil.AfterDeleteHook, scheduleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	scheduleAfterDeleteHooks = []ScheduleHook{}

	AddScheduleHook(boil.BeforeUpsertHook, scheduleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	scheduleBeforeUpsertHooks = []ScheduleHook{}

	AddScheduleHook(boil.AfterUpsertHook, scheduleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	scheduleAfterUpsertHooks = []ScheduleHook{}
}

func testSchedulesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Schedule{}
	if err = randomize.Struct(seed, o, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Schedules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSchedulesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Schedule{}
	if err = randomize.Struct(seed, o, scheduleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(scheduleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Schedules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testScheduleToManyScheduleDetails(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Schedule
	var b, c ScheduleDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, scheduleDetailDBTypes, false, scheduleDetailColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, scheduleDetailDBTypes, false, scheduleDetailColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ScheduleID, a.ID)
	queries.Assign(&c.ScheduleID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	scheduleDetail, err := a.ScheduleDetails().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range scheduleDetail {
		if queries.Equal(v.ScheduleID, b.ScheduleID) {
			bFound = true
		}
		if queries.Equal(v.ScheduleID, c.ScheduleID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ScheduleSlice{&a}
	if err = a.L.LoadScheduleDetails(ctx, tx, false, (*[]*Schedule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ScheduleDetails); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ScheduleDetails = nil
	if err = a.L.LoadScheduleDetails(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ScheduleDetails); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", scheduleDetail)
	}
}

func testScheduleToManyAddOpScheduleDetails(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Schedule
	var b, c, d, e ScheduleDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDBTypes, false, strmangle.SetComplement(schedulePrimaryKeyColumns, scheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ScheduleDetail{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, scheduleDetailDBTypes, false, strmangle.SetComplement(scheduleDetailPrimaryKeyColumns, scheduleDetailColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ScheduleDetail{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddScheduleDetails(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ScheduleID) {
			t.Error("foreign key was wrong value", a.ID, first.ScheduleID)
		}
		if !queries.Equal(a.ID, second.ScheduleID) {
			t.Error("foreign key was wrong value", a.ID, second.ScheduleID)
		}

		if first.R.Schedule != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Schedule != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ScheduleDetails[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ScheduleDetails[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ScheduleDetails().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testScheduleToManySetOpScheduleDetails(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Schedule
	var b, c, d, e ScheduleDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDBTypes, false, strmangle.SetComplement(schedulePrimaryKeyColumns, scheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ScheduleDetail{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, scheduleDetailDBTypes, false, strmangle.SetComplement(scheduleDetailPrimaryKeyColumns, scheduleDetailColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetScheduleDetails(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ScheduleDetails().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetScheduleDetails(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ScheduleDetails().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ScheduleID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ScheduleID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ScheduleID) {
		t.Error("foreign key was wrong value", a.ID, d.ScheduleID)
	}
	if !queries.Equal(a.ID, e.ScheduleID) {
		t.Error("foreign key was wrong value", a.ID, e.ScheduleID)
	}

	if b.R.Schedule != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Schedule != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Schedule != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Schedule != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ScheduleDetails[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ScheduleDetails[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testScheduleToManyRemoveOpScheduleDetails(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Schedule
	var b, c, d, e ScheduleDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDBTypes, false, strmangle.SetComplement(schedulePrimaryKeyColumns, scheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ScheduleDetail{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, scheduleDetailDBTypes, false, strmangle.SetComplement(scheduleDetailPrimaryKeyColumns, scheduleDetailColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddScheduleDetails(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ScheduleDetails().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveScheduleDetails(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ScheduleDetails().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ScheduleID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ScheduleID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Schedule != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Schedule != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Schedule != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Schedule != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ScheduleDetails) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ScheduleDetails[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ScheduleDetails[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testScheduleToOneCenterUsingCenter(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Schedule
	var foreign Center

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, centerDBTypes, false, centerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Center struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CenterID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Center().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ScheduleSlice{&local}
	if err = local.L.LoadCenter(ctx, tx, false, (*[]*Schedule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Center == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Center = nil
	if err = local.L.LoadCenter(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Center == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testScheduleToOneSetOpCenterUsingCenter(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Schedule
	var b, c Center

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDBTypes, false, strmangle.SetComplement(schedulePrimaryKeyColumns, scheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, centerDBTypes, false, strmangle.SetComplement(centerPrimaryKeyColumns, centerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, centerDBTypes, false, strmangle.SetComplement(centerPrimaryKeyColumns, centerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Center{&b, &c} {
		err = a.SetCenter(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Center != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Schedules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CenterID, x.ID) {
			t.Error("foreign key was wrong value", a.CenterID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CenterID))
		reflect.Indirect(reflect.ValueOf(&a.CenterID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CenterID, x.ID) {
			t.Error("foreign key was wrong value", a.CenterID, x.ID)
		}
	}
}

func testScheduleToOneRemoveOpCenterUsingCenter(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Schedule
	var b Center

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDBTypes, false, strmangle.SetComplement(schedulePrimaryKeyColumns, scheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, centerDBTypes, false, strmangle.SetComplement(centerPrimaryKeyColumns, centerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCenter(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCenter(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Center().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Center != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CenterID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Schedules) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSchedulesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Schedule{}
	if err = randomize.Struct(seed, o, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSchedulesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Schedule{}
	if err = randomize.Struct(seed, o, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ScheduleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSchedulesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Schedule{}
	if err = randomize.Struct(seed, o, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Schedules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	scheduleDBTypes = map[string]string{`CenterID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `EndAt`: `timestamp with time zone`, `ID`: `uuid`, `StartAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_               = bytes.MinRead
)

func testSchedulesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(schedulePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(scheduleColumns) == len(schedulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Schedule{}
	if err = randomize.Struct(seed, o, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Schedules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, scheduleDBTypes, true, schedulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSchedulesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(scheduleColumns) == len(schedulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Schedule{}
	if err = randomize.Struct(seed, o, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Schedules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, scheduleDBTypes, true, schedulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(scheduleColumns, schedulePrimaryKeyColumns) {
		fields = scheduleColumns
	} else {
		fields = strmangle.SetComplement(
			scheduleColumns,
			schedulePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ScheduleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSchedulesUpsert(t *testing.T) {
	t.Parallel()

	if len(scheduleColumns) == len(schedulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Schedule{}
	if err = randomize.Struct(seed, &o, scheduleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Schedule: %s", err)
	}

	count, err := Schedules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, scheduleDBTypes, false, schedulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Schedule: %s", err)
	}

	count, err = Schedules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
