// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Addresses", testAddresses)
	t.Run("Categories", testCategories)
	t.Run("Centers", testCenters)
	t.Run("Cities", testCities)
	t.Run("Classes", testClasses)
	t.Run("Images", testImages)
	t.Run("ImageMaps", testImageMaps)
	t.Run("Permissions", testPermissions)
	t.Run("Roles", testRoles)
	t.Run("RolePermissions", testRolePermissions)
	t.Run("Schedules", testSchedules)
	t.Run("ScheduleDetails", testScheduleDetails)
	t.Run("Tags", testTags)
	t.Run("TagMaps", testTagMaps)
	t.Run("Trainers", testTrainers)
	t.Run("Users", testUsers)
	t.Run("UserRoles", testUserRoles)
	t.Run("UserSessions", testUserSessions)
}

func TestDelete(t *testing.T) {
	t.Run("Addresses", testAddressesDelete)
	t.Run("Categories", testCategoriesDelete)
	t.Run("Centers", testCentersDelete)
	t.Run("Cities", testCitiesDelete)
	t.Run("Classes", testClassesDelete)
	t.Run("Images", testImagesDelete)
	t.Run("ImageMaps", testImageMapsDelete)
	t.Run("Permissions", testPermissionsDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("RolePermissions", testRolePermissionsDelete)
	t.Run("Schedules", testSchedulesDelete)
	t.Run("ScheduleDetails", testScheduleDetailsDelete)
	t.Run("Tags", testTagsDelete)
	t.Run("TagMaps", testTagMapsDelete)
	t.Run("Trainers", testTrainersDelete)
	t.Run("Users", testUsersDelete)
	t.Run("UserRoles", testUserRolesDelete)
	t.Run("UserSessions", testUserSessionsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Addresses", testAddressesQueryDeleteAll)
	t.Run("Categories", testCategoriesQueryDeleteAll)
	t.Run("Centers", testCentersQueryDeleteAll)
	t.Run("Cities", testCitiesQueryDeleteAll)
	t.Run("Classes", testClassesQueryDeleteAll)
	t.Run("Images", testImagesQueryDeleteAll)
	t.Run("ImageMaps", testImageMapsQueryDeleteAll)
	t.Run("Permissions", testPermissionsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("RolePermissions", testRolePermissionsQueryDeleteAll)
	t.Run("Schedules", testSchedulesQueryDeleteAll)
	t.Run("ScheduleDetails", testScheduleDetailsQueryDeleteAll)
	t.Run("Tags", testTagsQueryDeleteAll)
	t.Run("TagMaps", testTagMapsQueryDeleteAll)
	t.Run("Trainers", testTrainersQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("UserRoles", testUserRolesQueryDeleteAll)
	t.Run("UserSessions", testUserSessionsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Addresses", testAddressesSliceDeleteAll)
	t.Run("Categories", testCategoriesSliceDeleteAll)
	t.Run("Centers", testCentersSliceDeleteAll)
	t.Run("Cities", testCitiesSliceDeleteAll)
	t.Run("Classes", testClassesSliceDeleteAll)
	t.Run("Images", testImagesSliceDeleteAll)
	t.Run("ImageMaps", testImageMapsSliceDeleteAll)
	t.Run("Permissions", testPermissionsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("RolePermissions", testRolePermissionsSliceDeleteAll)
	t.Run("Schedules", testSchedulesSliceDeleteAll)
	t.Run("ScheduleDetails", testScheduleDetailsSliceDeleteAll)
	t.Run("Tags", testTagsSliceDeleteAll)
	t.Run("TagMaps", testTagMapsSliceDeleteAll)
	t.Run("Trainers", testTrainersSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("UserRoles", testUserRolesSliceDeleteAll)
	t.Run("UserSessions", testUserSessionsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Addresses", testAddressesExists)
	t.Run("Categories", testCategoriesExists)
	t.Run("Centers", testCentersExists)
	t.Run("Cities", testCitiesExists)
	t.Run("Classes", testClassesExists)
	t.Run("Images", testImagesExists)
	t.Run("ImageMaps", testImageMapsExists)
	t.Run("Permissions", testPermissionsExists)
	t.Run("Roles", testRolesExists)
	t.Run("RolePermissions", testRolePermissionsExists)
	t.Run("Schedules", testSchedulesExists)
	t.Run("ScheduleDetails", testScheduleDetailsExists)
	t.Run("Tags", testTagsExists)
	t.Run("TagMaps", testTagMapsExists)
	t.Run("Trainers", testTrainersExists)
	t.Run("Users", testUsersExists)
	t.Run("UserRoles", testUserRolesExists)
	t.Run("UserSessions", testUserSessionsExists)
}

func TestFind(t *testing.T) {
	t.Run("Addresses", testAddressesFind)
	t.Run("Categories", testCategoriesFind)
	t.Run("Centers", testCentersFind)
	t.Run("Cities", testCitiesFind)
	t.Run("Classes", testClassesFind)
	t.Run("Images", testImagesFind)
	t.Run("ImageMaps", testImageMapsFind)
	t.Run("Permissions", testPermissionsFind)
	t.Run("Roles", testRolesFind)
	t.Run("RolePermissions", testRolePermissionsFind)
	t.Run("Schedules", testSchedulesFind)
	t.Run("ScheduleDetails", testScheduleDetailsFind)
	t.Run("Tags", testTagsFind)
	t.Run("TagMaps", testTagMapsFind)
	t.Run("Trainers", testTrainersFind)
	t.Run("Users", testUsersFind)
	t.Run("UserRoles", testUserRolesFind)
	t.Run("UserSessions", testUserSessionsFind)
}

func TestBind(t *testing.T) {
	t.Run("Addresses", testAddressesBind)
	t.Run("Categories", testCategoriesBind)
	t.Run("Centers", testCentersBind)
	t.Run("Cities", testCitiesBind)
	t.Run("Classes", testClassesBind)
	t.Run("Images", testImagesBind)
	t.Run("ImageMaps", testImageMapsBind)
	t.Run("Permissions", testPermissionsBind)
	t.Run("Roles", testRolesBind)
	t.Run("RolePermissions", testRolePermissionsBind)
	t.Run("Schedules", testSchedulesBind)
	t.Run("ScheduleDetails", testScheduleDetailsBind)
	t.Run("Tags", testTagsBind)
	t.Run("TagMaps", testTagMapsBind)
	t.Run("Trainers", testTrainersBind)
	t.Run("Users", testUsersBind)
	t.Run("UserRoles", testUserRolesBind)
	t.Run("UserSessions", testUserSessionsBind)
}

func TestOne(t *testing.T) {
	t.Run("Addresses", testAddressesOne)
	t.Run("Categories", testCategoriesOne)
	t.Run("Centers", testCentersOne)
	t.Run("Cities", testCitiesOne)
	t.Run("Classes", testClassesOne)
	t.Run("Images", testImagesOne)
	t.Run("ImageMaps", testImageMapsOne)
	t.Run("Permissions", testPermissionsOne)
	t.Run("Roles", testRolesOne)
	t.Run("RolePermissions", testRolePermissionsOne)
	t.Run("Schedules", testSchedulesOne)
	t.Run("ScheduleDetails", testScheduleDetailsOne)
	t.Run("Tags", testTagsOne)
	t.Run("TagMaps", testTagMapsOne)
	t.Run("Trainers", testTrainersOne)
	t.Run("Users", testUsersOne)
	t.Run("UserRoles", testUserRolesOne)
	t.Run("UserSessions", testUserSessionsOne)
}

func TestAll(t *testing.T) {
	t.Run("Addresses", testAddressesAll)
	t.Run("Categories", testCategoriesAll)
	t.Run("Centers", testCentersAll)
	t.Run("Cities", testCitiesAll)
	t.Run("Classes", testClassesAll)
	t.Run("Images", testImagesAll)
	t.Run("ImageMaps", testImageMapsAll)
	t.Run("Permissions", testPermissionsAll)
	t.Run("Roles", testRolesAll)
	t.Run("RolePermissions", testRolePermissionsAll)
	t.Run("Schedules", testSchedulesAll)
	t.Run("ScheduleDetails", testScheduleDetailsAll)
	t.Run("Tags", testTagsAll)
	t.Run("TagMaps", testTagMapsAll)
	t.Run("Trainers", testTrainersAll)
	t.Run("Users", testUsersAll)
	t.Run("UserRoles", testUserRolesAll)
	t.Run("UserSessions", testUserSessionsAll)
}

func TestCount(t *testing.T) {
	t.Run("Addresses", testAddressesCount)
	t.Run("Categories", testCategoriesCount)
	t.Run("Centers", testCentersCount)
	t.Run("Cities", testCitiesCount)
	t.Run("Classes", testClassesCount)
	t.Run("Images", testImagesCount)
	t.Run("ImageMaps", testImageMapsCount)
	t.Run("Permissions", testPermissionsCount)
	t.Run("Roles", testRolesCount)
	t.Run("RolePermissions", testRolePermissionsCount)
	t.Run("Schedules", testSchedulesCount)
	t.Run("ScheduleDetails", testScheduleDetailsCount)
	t.Run("Tags", testTagsCount)
	t.Run("TagMaps", testTagMapsCount)
	t.Run("Trainers", testTrainersCount)
	t.Run("Users", testUsersCount)
	t.Run("UserRoles", testUserRolesCount)
	t.Run("UserSessions", testUserSessionsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Addresses", testAddressesHooks)
	t.Run("Categories", testCategoriesHooks)
	t.Run("Centers", testCentersHooks)
	t.Run("Cities", testCitiesHooks)
	t.Run("Classes", testClassesHooks)
	t.Run("Images", testImagesHooks)
	t.Run("ImageMaps", testImageMapsHooks)
	t.Run("Permissions", testPermissionsHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("RolePermissions", testRolePermissionsHooks)
	t.Run("Schedules", testSchedulesHooks)
	t.Run("ScheduleDetails", testScheduleDetailsHooks)
	t.Run("Tags", testTagsHooks)
	t.Run("TagMaps", testTagMapsHooks)
	t.Run("Trainers", testTrainersHooks)
	t.Run("Users", testUsersHooks)
	t.Run("UserRoles", testUserRolesHooks)
	t.Run("UserSessions", testUserSessionsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Addresses", testAddressesInsert)
	t.Run("Addresses", testAddressesInsertWhitelist)
	t.Run("Categories", testCategoriesInsert)
	t.Run("Categories", testCategoriesInsertWhitelist)
	t.Run("Centers", testCentersInsert)
	t.Run("Centers", testCentersInsertWhitelist)
	t.Run("Cities", testCitiesInsert)
	t.Run("Cities", testCitiesInsertWhitelist)
	t.Run("Classes", testClassesInsert)
	t.Run("Classes", testClassesInsertWhitelist)
	t.Run("Images", testImagesInsert)
	t.Run("Images", testImagesInsertWhitelist)
	t.Run("ImageMaps", testImageMapsInsert)
	t.Run("ImageMaps", testImageMapsInsertWhitelist)
	t.Run("Permissions", testPermissionsInsert)
	t.Run("Permissions", testPermissionsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("RolePermissions", testRolePermissionsInsert)
	t.Run("RolePermissions", testRolePermissionsInsertWhitelist)
	t.Run("Schedules", testSchedulesInsert)
	t.Run("Schedules", testSchedulesInsertWhitelist)
	t.Run("ScheduleDetails", testScheduleDetailsInsert)
	t.Run("ScheduleDetails", testScheduleDetailsInsertWhitelist)
	t.Run("Tags", testTagsInsert)
	t.Run("Tags", testTagsInsertWhitelist)
	t.Run("TagMaps", testTagMapsInsert)
	t.Run("TagMaps", testTagMapsInsertWhitelist)
	t.Run("Trainers", testTrainersInsert)
	t.Run("Trainers", testTrainersInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("UserRoles", testUserRolesInsert)
	t.Run("UserRoles", testUserRolesInsertWhitelist)
	t.Run("UserSessions", testUserSessionsInsert)
	t.Run("UserSessions", testUserSessionsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CenterToAddressUsingAddress", testCenterToOneAddressUsingAddress)
	t.Run("CenterToCityUsingCity", testCenterToOneCityUsingCity)
	t.Run("ClassToCategoryUsingCategory", testClassToOneCategoryUsingCategory)
	t.Run("ImageMapToImageUsingImage", testImageMapToOneImageUsingImage)
	t.Run("RolePermissionToRoleUsingRole", testRolePermissionToOneRoleUsingRole)
	t.Run("RolePermissionToPermissionUsingPermission", testRolePermissionToOnePermissionUsingPermission)
	t.Run("ScheduleToCenterUsingCenter", testScheduleToOneCenterUsingCenter)
	t.Run("ScheduleDetailToScheduleUsingSchedule", testScheduleDetailToOneScheduleUsingSchedule)
	t.Run("ScheduleDetailToClassUsingClass", testScheduleDetailToOneClassUsingClass)
	t.Run("ScheduleDetailToTrainerUsingTrainer", testScheduleDetailToOneTrainerUsingTrainer)
	t.Run("TagMapToTagUsingTag", testTagMapToOneTagUsingTag)
	t.Run("TrainerToImageUsingImage", testTrainerToOneImageUsingImage)
	t.Run("UserToImageUsingImage", testUserToOneImageUsingImage)
	t.Run("UserRoleToUserUsingUser", testUserRoleToOneUserUsingUser)
	t.Run("UserRoleToRoleUsingRole", testUserRoleToOneRoleUsingRole)
	t.Run("UserSessionToUserUsingUser", testUserSessionToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AddressToCenters", testAddressToManyCenters)
	t.Run("CategoryToClasses", testCategoryToManyClasses)
	t.Run("CenterToSchedules", testCenterToManySchedules)
	t.Run("CityToCenters", testCityToManyCenters)
	t.Run("ClassToScheduleDetails", testClassToManyScheduleDetails)
	t.Run("ImageToImageMaps", testImageToManyImageMaps)
	t.Run("ImageToTrainers", testImageToManyTrainers)
	t.Run("ImageToUsers", testImageToManyUsers)
	t.Run("PermissionToRolePermissions", testPermissionToManyRolePermissions)
	t.Run("RoleToRolePermissions", testRoleToManyRolePermissions)
	t.Run("RoleToUserRoles", testRoleToManyUserRoles)
	t.Run("ScheduleToScheduleDetails", testScheduleToManyScheduleDetails)
	t.Run("TagToTagMaps", testTagToManyTagMaps)
	t.Run("TrainerToScheduleDetails", testTrainerToManyScheduleDetails)
	t.Run("UserToUserRoles", testUserToManyUserRoles)
	t.Run("UserToUserSessions", testUserToManyUserSessions)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CenterToAddressUsingCenters", testCenterToOneSetOpAddressUsingAddress)
	t.Run("CenterToCityUsingCenters", testCenterToOneSetOpCityUsingCity)
	t.Run("ClassToCategoryUsingClasses", testClassToOneSetOpCategoryUsingCategory)
	t.Run("ImageMapToImageUsingImageMaps", testImageMapToOneSetOpImageUsingImage)
	t.Run("RolePermissionToRoleUsingRolePermissions", testRolePermissionToOneSetOpRoleUsingRole)
	t.Run("RolePermissionToPermissionUsingRolePermissions", testRolePermissionToOneSetOpPermissionUsingPermission)
	t.Run("ScheduleToCenterUsingSchedules", testScheduleToOneSetOpCenterUsingCenter)
	t.Run("ScheduleDetailToScheduleUsingScheduleDetails", testScheduleDetailToOneSetOpScheduleUsingSchedule)
	t.Run("ScheduleDetailToClassUsingScheduleDetails", testScheduleDetailToOneSetOpClassUsingClass)
	t.Run("ScheduleDetailToTrainerUsingScheduleDetails", testScheduleDetailToOneSetOpTrainerUsingTrainer)
	t.Run("TagMapToTagUsingTagMaps", testTagMapToOneSetOpTagUsingTag)
	t.Run("TrainerToImageUsingTrainers", testTrainerToOneSetOpImageUsingImage)
	t.Run("UserToImageUsingUsers", testUserToOneSetOpImageUsingImage)
	t.Run("UserRoleToUserUsingUserRoles", testUserRoleToOneSetOpUserUsingUser)
	t.Run("UserRoleToRoleUsingUserRoles", testUserRoleToOneSetOpRoleUsingRole)
	t.Run("UserSessionToUserUsingUserSessions", testUserSessionToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("CenterToAddressUsingCenters", testCenterToOneRemoveOpAddressUsingAddress)
	t.Run("CenterToCityUsingCenters", testCenterToOneRemoveOpCityUsingCity)
	t.Run("ClassToCategoryUsingClasses", testClassToOneRemoveOpCategoryUsingCategory)
	t.Run("ImageMapToImageUsingImageMaps", testImageMapToOneRemoveOpImageUsingImage)
	t.Run("RolePermissionToRoleUsingRolePermissions", testRolePermissionToOneRemoveOpRoleUsingRole)
	t.Run("RolePermissionToPermissionUsingRolePermissions", testRolePermissionToOneRemoveOpPermissionUsingPermission)
	t.Run("ScheduleToCenterUsingSchedules", testScheduleToOneRemoveOpCenterUsingCenter)
	t.Run("ScheduleDetailToScheduleUsingScheduleDetails", testScheduleDetailToOneRemoveOpScheduleUsingSchedule)
	t.Run("ScheduleDetailToClassUsingScheduleDetails", testScheduleDetailToOneRemoveOpClassUsingClass)
	t.Run("ScheduleDetailToTrainerUsingScheduleDetails", testScheduleDetailToOneRemoveOpTrainerUsingTrainer)
	t.Run("TagMapToTagUsingTagMaps", testTagMapToOneRemoveOpTagUsingTag)
	t.Run("TrainerToImageUsingTrainers", testTrainerToOneRemoveOpImageUsingImage)
	t.Run("UserToImageUsingUsers", testUserToOneRemoveOpImageUsingImage)
	t.Run("UserRoleToUserUsingUserRoles", testUserRoleToOneRemoveOpUserUsingUser)
	t.Run("UserRoleToRoleUsingUserRoles", testUserRoleToOneRemoveOpRoleUsingRole)
	t.Run("UserSessionToUserUsingUserSessions", testUserSessionToOneRemoveOpUserUsingUser)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AddressToCenters", testAddressToManyAddOpCenters)
	t.Run("CategoryToClasses", testCategoryToManyAddOpClasses)
	t.Run("CenterToSchedules", testCenterToManyAddOpSchedules)
	t.Run("CityToCenters", testCityToManyAddOpCenters)
	t.Run("ClassToScheduleDetails", testClassToManyAddOpScheduleDetails)
	t.Run("ImageToImageMaps", testImageToManyAddOpImageMaps)
	t.Run("ImageToTrainers", testImageToManyAddOpTrainers)
	t.Run("ImageToUsers", testImageToManyAddOpUsers)
	t.Run("PermissionToRolePermissions", testPermissionToManyAddOpRolePermissions)
	t.Run("RoleToRolePermissions", testRoleToManyAddOpRolePermissions)
	t.Run("RoleToUserRoles", testRoleToManyAddOpUserRoles)
	t.Run("ScheduleToScheduleDetails", testScheduleToManyAddOpScheduleDetails)
	t.Run("TagToTagMaps", testTagToManyAddOpTagMaps)
	t.Run("TrainerToScheduleDetails", testTrainerToManyAddOpScheduleDetails)
	t.Run("UserToUserRoles", testUserToManyAddOpUserRoles)
	t.Run("UserToUserSessions", testUserToManyAddOpUserSessions)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AddressToCenters", testAddressToManySetOpCenters)
	t.Run("CategoryToClasses", testCategoryToManySetOpClasses)
	t.Run("CenterToSchedules", testCenterToManySetOpSchedules)
	t.Run("CityToCenters", testCityToManySetOpCenters)
	t.Run("ClassToScheduleDetails", testClassToManySetOpScheduleDetails)
	t.Run("ImageToImageMaps", testImageToManySetOpImageMaps)
	t.Run("ImageToTrainers", testImageToManySetOpTrainers)
	t.Run("ImageToUsers", testImageToManySetOpUsers)
	t.Run("PermissionToRolePermissions", testPermissionToManySetOpRolePermissions)
	t.Run("RoleToRolePermissions", testRoleToManySetOpRolePermissions)
	t.Run("RoleToUserRoles", testRoleToManySetOpUserRoles)
	t.Run("ScheduleToScheduleDetails", testScheduleToManySetOpScheduleDetails)
	t.Run("TagToTagMaps", testTagToManySetOpTagMaps)
	t.Run("TrainerToScheduleDetails", testTrainerToManySetOpScheduleDetails)
	t.Run("UserToUserRoles", testUserToManySetOpUserRoles)
	t.Run("UserToUserSessions", testUserToManySetOpUserSessions)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AddressToCenters", testAddressToManyRemoveOpCenters)
	t.Run("CategoryToClasses", testCategoryToManyRemoveOpClasses)
	t.Run("CenterToSchedules", testCenterToManyRemoveOpSchedules)
	t.Run("CityToCenters", testCityToManyRemoveOpCenters)
	t.Run("ClassToScheduleDetails", testClassToManyRemoveOpScheduleDetails)
	t.Run("ImageToImageMaps", testImageToManyRemoveOpImageMaps)
	t.Run("ImageToTrainers", testImageToManyRemoveOpTrainers)
	t.Run("ImageToUsers", testImageToManyRemoveOpUsers)
	t.Run("PermissionToRolePermissions", testPermissionToManyRemoveOpRolePermissions)
	t.Run("RoleToRolePermissions", testRoleToManyRemoveOpRolePermissions)
	t.Run("RoleToUserRoles", testRoleToManyRemoveOpUserRoles)
	t.Run("ScheduleToScheduleDetails", testScheduleToManyRemoveOpScheduleDetails)
	t.Run("TagToTagMaps", testTagToManyRemoveOpTagMaps)
	t.Run("TrainerToScheduleDetails", testTrainerToManyRemoveOpScheduleDetails)
	t.Run("UserToUserRoles", testUserToManyRemoveOpUserRoles)
	t.Run("UserToUserSessions", testUserToManyRemoveOpUserSessions)
}

func TestReload(t *testing.T) {
	t.Run("Addresses", testAddressesReload)
	t.Run("Categories", testCategoriesReload)
	t.Run("Centers", testCentersReload)
	t.Run("Cities", testCitiesReload)
	t.Run("Classes", testClassesReload)
	t.Run("Images", testImagesReload)
	t.Run("ImageMaps", testImageMapsReload)
	t.Run("Permissions", testPermissionsReload)
	t.Run("Roles", testRolesReload)
	t.Run("RolePermissions", testRolePermissionsReload)
	t.Run("Schedules", testSchedulesReload)
	t.Run("ScheduleDetails", testScheduleDetailsReload)
	t.Run("Tags", testTagsReload)
	t.Run("TagMaps", testTagMapsReload)
	t.Run("Trainers", testTrainersReload)
	t.Run("Users", testUsersReload)
	t.Run("UserRoles", testUserRolesReload)
	t.Run("UserSessions", testUserSessionsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Addresses", testAddressesReloadAll)
	t.Run("Categories", testCategoriesReloadAll)
	t.Run("Centers", testCentersReloadAll)
	t.Run("Cities", testCitiesReloadAll)
	t.Run("Classes", testClassesReloadAll)
	t.Run("Images", testImagesReloadAll)
	t.Run("ImageMaps", testImageMapsReloadAll)
	t.Run("Permissions", testPermissionsReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("RolePermissions", testRolePermissionsReloadAll)
	t.Run("Schedules", testSchedulesReloadAll)
	t.Run("ScheduleDetails", testScheduleDetailsReloadAll)
	t.Run("Tags", testTagsReloadAll)
	t.Run("TagMaps", testTagMapsReloadAll)
	t.Run("Trainers", testTrainersReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("UserRoles", testUserRolesReloadAll)
	t.Run("UserSessions", testUserSessionsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Addresses", testAddressesSelect)
	t.Run("Categories", testCategoriesSelect)
	t.Run("Centers", testCentersSelect)
	t.Run("Cities", testCitiesSelect)
	t.Run("Classes", testClassesSelect)
	t.Run("Images", testImagesSelect)
	t.Run("ImageMaps", testImageMapsSelect)
	t.Run("Permissions", testPermissionsSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("RolePermissions", testRolePermissionsSelect)
	t.Run("Schedules", testSchedulesSelect)
	t.Run("ScheduleDetails", testScheduleDetailsSelect)
	t.Run("Tags", testTagsSelect)
	t.Run("TagMaps", testTagMapsSelect)
	t.Run("Trainers", testTrainersSelect)
	t.Run("Users", testUsersSelect)
	t.Run("UserRoles", testUserRolesSelect)
	t.Run("UserSessions", testUserSessionsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Addresses", testAddressesUpdate)
	t.Run("Categories", testCategoriesUpdate)
	t.Run("Centers", testCentersUpdate)
	t.Run("Cities", testCitiesUpdate)
	t.Run("Classes", testClassesUpdate)
	t.Run("Images", testImagesUpdate)
	t.Run("ImageMaps", testImageMapsUpdate)
	t.Run("Permissions", testPermissionsUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("RolePermissions", testRolePermissionsUpdate)
	t.Run("Schedules", testSchedulesUpdate)
	t.Run("ScheduleDetails", testScheduleDetailsUpdate)
	t.Run("Tags", testTagsUpdate)
	t.Run("TagMaps", testTagMapsUpdate)
	t.Run("Trainers", testTrainersUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("UserRoles", testUserRolesUpdate)
	t.Run("UserSessions", testUserSessionsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Addresses", testAddressesSliceUpdateAll)
	t.Run("Categories", testCategoriesSliceUpdateAll)
	t.Run("Centers", testCentersSliceUpdateAll)
	t.Run("Cities", testCitiesSliceUpdateAll)
	t.Run("Classes", testClassesSliceUpdateAll)
	t.Run("Images", testImagesSliceUpdateAll)
	t.Run("ImageMaps", testImageMapsSliceUpdateAll)
	t.Run("Permissions", testPermissionsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("RolePermissions", testRolePermissionsSliceUpdateAll)
	t.Run("Schedules", testSchedulesSliceUpdateAll)
	t.Run("ScheduleDetails", testScheduleDetailsSliceUpdateAll)
	t.Run("Tags", testTagsSliceUpdateAll)
	t.Run("TagMaps", testTagMapsSliceUpdateAll)
	t.Run("Trainers", testTrainersSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("UserRoles", testUserRolesSliceUpdateAll)
	t.Run("UserSessions", testUserSessionsSliceUpdateAll)
}
