// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ScheduleDetail is an object representing the database table.
type ScheduleDetail struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ScheduleID null.String `boil:"schedule_id" json:"schedule_id,omitempty" toml:"schedule_id" yaml:"schedule_id,omitempty"`
	ClassID    null.String `boil:"class_id" json:"class_id,omitempty" toml:"class_id" yaml:"class_id,omitempty"`
	TrainerID  null.String `boil:"trainer_id" json:"trainer_id,omitempty" toml:"trainer_id" yaml:"trainer_id,omitempty"`
	StartAt    null.Time   `boil:"start_at" json:"start_at,omitempty" toml:"start_at" yaml:"start_at,omitempty"`
	EndAt      null.Time   `boil:"end_at" json:"end_at,omitempty" toml:"end_at" yaml:"end_at,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *scheduleDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L scheduleDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ScheduleDetailColumns = struct {
	ID         string
	ScheduleID string
	ClassID    string
	TrainerID  string
	StartAt    string
	EndAt      string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	ScheduleID: "schedule_id",
	ClassID:    "class_id",
	TrainerID:  "trainer_id",
	StartAt:    "start_at",
	EndAt:      "end_at",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

// ScheduleDetailRels is where relationship names are stored.
var ScheduleDetailRels = struct {
	Schedule string
	Class    string
	Trainer  string
}{
	Schedule: "Schedule",
	Class:    "Class",
	Trainer:  "Trainer",
}

// scheduleDetailR is where relationships are stored.
type scheduleDetailR struct {
	Schedule *Schedule
	Class    *Class
	Trainer  *Trainer
}

// NewStruct creates a new relationship struct
func (*scheduleDetailR) NewStruct() *scheduleDetailR {
	return &scheduleDetailR{}
}

// scheduleDetailL is where Load methods for each relationship are stored.
type scheduleDetailL struct{}

var (
	scheduleDetailColumns               = []string{"id", "schedule_id", "class_id", "trainer_id", "start_at", "end_at", "created_at", "updated_at"}
	scheduleDetailColumnsWithoutDefault = []string{"id", "schedule_id", "class_id", "trainer_id", "start_at", "end_at"}
	scheduleDetailColumnsWithDefault    = []string{"created_at", "updated_at"}
	scheduleDetailPrimaryKeyColumns     = []string{"id"}
)

type (
	// ScheduleDetailSlice is an alias for a slice of pointers to ScheduleDetail.
	// This should generally be used opposed to []ScheduleDetail.
	ScheduleDetailSlice []*ScheduleDetail
	// ScheduleDetailHook is the signature for custom ScheduleDetail hook methods
	ScheduleDetailHook func(context.Context, boil.ContextExecutor, *ScheduleDetail) error

	scheduleDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	scheduleDetailType                 = reflect.TypeOf(&ScheduleDetail{})
	scheduleDetailMapping              = queries.MakeStructMapping(scheduleDetailType)
	scheduleDetailPrimaryKeyMapping, _ = queries.BindMapping(scheduleDetailType, scheduleDetailMapping, scheduleDetailPrimaryKeyColumns)
	scheduleDetailInsertCacheMut       sync.RWMutex
	scheduleDetailInsertCache          = make(map[string]insertCache)
	scheduleDetailUpdateCacheMut       sync.RWMutex
	scheduleDetailUpdateCache          = make(map[string]updateCache)
	scheduleDetailUpsertCacheMut       sync.RWMutex
	scheduleDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var scheduleDetailBeforeInsertHooks []ScheduleDetailHook
var scheduleDetailBeforeUpdateHooks []ScheduleDetailHook
var scheduleDetailBeforeDeleteHooks []ScheduleDetailHook
var scheduleDetailBeforeUpsertHooks []ScheduleDetailHook

var scheduleDetailAfterInsertHooks []ScheduleDetailHook
var scheduleDetailAfterSelectHooks []ScheduleDetailHook
var scheduleDetailAfterUpdateHooks []ScheduleDetailHook
var scheduleDetailAfterDeleteHooks []ScheduleDetailHook
var scheduleDetailAfterUpsertHooks []ScheduleDetailHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ScheduleDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range scheduleDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ScheduleDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range scheduleDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ScheduleDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range scheduleDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ScheduleDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range scheduleDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ScheduleDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range scheduleDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ScheduleDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range scheduleDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ScheduleDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range scheduleDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ScheduleDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range scheduleDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ScheduleDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range scheduleDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddScheduleDetailHook registers your hook function for all future operations.
func AddScheduleDetailHook(hookPoint boil.HookPoint, scheduleDetailHook ScheduleDetailHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		scheduleDetailBeforeInsertHooks = append(scheduleDetailBeforeInsertHooks, scheduleDetailHook)
	case boil.BeforeUpdateHook:
		scheduleDetailBeforeUpdateHooks = append(scheduleDetailBeforeUpdateHooks, scheduleDetailHook)
	case boil.BeforeDeleteHook:
		scheduleDetailBeforeDeleteHooks = append(scheduleDetailBeforeDeleteHooks, scheduleDetailHook)
	case boil.BeforeUpsertHook:
		scheduleDetailBeforeUpsertHooks = append(scheduleDetailBeforeUpsertHooks, scheduleDetailHook)
	case boil.AfterInsertHook:
		scheduleDetailAfterInsertHooks = append(scheduleDetailAfterInsertHooks, scheduleDetailHook)
	case boil.AfterSelectHook:
		scheduleDetailAfterSelectHooks = append(scheduleDetailAfterSelectHooks, scheduleDetailHook)
	case boil.AfterUpdateHook:
		scheduleDetailAfterUpdateHooks = append(scheduleDetailAfterUpdateHooks, scheduleDetailHook)
	case boil.AfterDeleteHook:
		scheduleDetailAfterDeleteHooks = append(scheduleDetailAfterDeleteHooks, scheduleDetailHook)
	case boil.AfterUpsertHook:
		scheduleDetailAfterUpsertHooks = append(scheduleDetailAfterUpsertHooks, scheduleDetailHook)
	}
}

// One returns a single scheduleDetail record from the query.
func (q scheduleDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ScheduleDetail, error) {
	o := &ScheduleDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for schedule_detail")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ScheduleDetail records from the query.
func (q scheduleDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (ScheduleDetailSlice, error) {
	var o []*ScheduleDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ScheduleDetail slice")
	}

	if len(scheduleDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ScheduleDetail records in the query.
func (q scheduleDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count schedule_detail rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q scheduleDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if schedule_detail exists")
	}

	return count > 0, nil
}

// Schedule pointed to by the foreign key.
func (o *ScheduleDetail) Schedule(mods ...qm.QueryMod) scheduleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ScheduleID),
	}

	queryMods = append(queryMods, mods...)

	query := Schedules(queryMods...)
	queries.SetFrom(query.Query, "\"schedule\"")

	return query
}

// Class pointed to by the foreign key.
func (o *ScheduleDetail) Class(mods ...qm.QueryMod) classQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ClassID),
	}

	queryMods = append(queryMods, mods...)

	query := Classes(queryMods...)
	queries.SetFrom(query.Query, "\"class\"")

	return query
}

// Trainer pointed to by the foreign key.
func (o *ScheduleDetail) Trainer(mods ...qm.QueryMod) trainerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TrainerID),
	}

	queryMods = append(queryMods, mods...)

	query := Trainers(queryMods...)
	queries.SetFrom(query.Query, "\"trainer\"")

	return query
}

// LoadSchedule allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (scheduleDetailL) LoadSchedule(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScheduleDetail interface{}, mods queries.Applicator) error {
	var slice []*ScheduleDetail
	var object *ScheduleDetail

	if singular {
		object = maybeScheduleDetail.(*ScheduleDetail)
	} else {
		slice = *maybeScheduleDetail.(*[]*ScheduleDetail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &scheduleDetailR{}
		}
		if !queries.IsNil(object.ScheduleID) {
			args = append(args, object.ScheduleID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scheduleDetailR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ScheduleID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ScheduleID) {
				args = append(args, obj.ScheduleID)
			}

		}
	}

	query := NewQuery(qm.From(`schedule`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Schedule")
	}

	var resultSlice []*Schedule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Schedule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for schedule")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for schedule")
	}

	if len(scheduleDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Schedule = foreign
		if foreign.R == nil {
			foreign.R = &scheduleR{}
		}
		foreign.R.ScheduleDetails = append(foreign.R.ScheduleDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ScheduleID, foreign.ID) {
				local.R.Schedule = foreign
				if foreign.R == nil {
					foreign.R = &scheduleR{}
				}
				foreign.R.ScheduleDetails = append(foreign.R.ScheduleDetails, local)
				break
			}
		}
	}

	return nil
}

// LoadClass allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (scheduleDetailL) LoadClass(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScheduleDetail interface{}, mods queries.Applicator) error {
	var slice []*ScheduleDetail
	var object *ScheduleDetail

	if singular {
		object = maybeScheduleDetail.(*ScheduleDetail)
	} else {
		slice = *maybeScheduleDetail.(*[]*ScheduleDetail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &scheduleDetailR{}
		}
		if !queries.IsNil(object.ClassID) {
			args = append(args, object.ClassID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scheduleDetailR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ClassID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ClassID) {
				args = append(args, obj.ClassID)
			}

		}
	}

	query := NewQuery(qm.From(`class`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Class")
	}

	var resultSlice []*Class
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Class")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for class")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for class")
	}

	if len(scheduleDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Class = foreign
		if foreign.R == nil {
			foreign.R = &classR{}
		}
		foreign.R.ScheduleDetails = append(foreign.R.ScheduleDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ClassID, foreign.ID) {
				local.R.Class = foreign
				if foreign.R == nil {
					foreign.R = &classR{}
				}
				foreign.R.ScheduleDetails = append(foreign.R.ScheduleDetails, local)
				break
			}
		}
	}

	return nil
}

// LoadTrainer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (scheduleDetailL) LoadTrainer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScheduleDetail interface{}, mods queries.Applicator) error {
	var slice []*ScheduleDetail
	var object *ScheduleDetail

	if singular {
		object = maybeScheduleDetail.(*ScheduleDetail)
	} else {
		slice = *maybeScheduleDetail.(*[]*ScheduleDetail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &scheduleDetailR{}
		}
		if !queries.IsNil(object.TrainerID) {
			args = append(args, object.TrainerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scheduleDetailR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TrainerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TrainerID) {
				args = append(args, obj.TrainerID)
			}

		}
	}

	query := NewQuery(qm.From(`trainer`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Trainer")
	}

	var resultSlice []*Trainer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Trainer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trainer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trainer")
	}

	if len(scheduleDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Trainer = foreign
		if foreign.R == nil {
			foreign.R = &trainerR{}
		}
		foreign.R.ScheduleDetails = append(foreign.R.ScheduleDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TrainerID, foreign.ID) {
				local.R.Trainer = foreign
				if foreign.R == nil {
					foreign.R = &trainerR{}
				}
				foreign.R.ScheduleDetails = append(foreign.R.ScheduleDetails, local)
				break
			}
		}
	}

	return nil
}

// SetSchedule of the scheduleDetail to the related item.
// Sets o.R.Schedule to related.
// Adds o to related.R.ScheduleDetails.
func (o *ScheduleDetail) SetSchedule(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Schedule) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"schedule_detail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"schedule_id"}),
		strmangle.WhereClause("\"", "\"", 2, scheduleDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ScheduleID, related.ID)
	if o.R == nil {
		o.R = &scheduleDetailR{
			Schedule: related,
		}
	} else {
		o.R.Schedule = related
	}

	if related.R == nil {
		related.R = &scheduleR{
			ScheduleDetails: ScheduleDetailSlice{o},
		}
	} else {
		related.R.ScheduleDetails = append(related.R.ScheduleDetails, o)
	}

	return nil
}

// RemoveSchedule relationship.
// Sets o.R.Schedule to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ScheduleDetail) RemoveSchedule(ctx context.Context, exec boil.ContextExecutor, related *Schedule) error {
	var err error

	queries.SetScanner(&o.ScheduleID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("schedule_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Schedule = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ScheduleDetails {
		if queries.Equal(o.ScheduleID, ri.ScheduleID) {
			continue
		}

		ln := len(related.R.ScheduleDetails)
		if ln > 1 && i < ln-1 {
			related.R.ScheduleDetails[i] = related.R.ScheduleDetails[ln-1]
		}
		related.R.ScheduleDetails = related.R.ScheduleDetails[:ln-1]
		break
	}
	return nil
}

// SetClass of the scheduleDetail to the related item.
// Sets o.R.Class to related.
// Adds o to related.R.ScheduleDetails.
func (o *ScheduleDetail) SetClass(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Class) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"schedule_detail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"class_id"}),
		strmangle.WhereClause("\"", "\"", 2, scheduleDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ClassID, related.ID)
	if o.R == nil {
		o.R = &scheduleDetailR{
			Class: related,
		}
	} else {
		o.R.Class = related
	}

	if related.R == nil {
		related.R = &classR{
			ScheduleDetails: ScheduleDetailSlice{o},
		}
	} else {
		related.R.ScheduleDetails = append(related.R.ScheduleDetails, o)
	}

	return nil
}

// RemoveClass relationship.
// Sets o.R.Class to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ScheduleDetail) RemoveClass(ctx context.Context, exec boil.ContextExecutor, related *Class) error {
	var err error

	queries.SetScanner(&o.ClassID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("class_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Class = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ScheduleDetails {
		if queries.Equal(o.ClassID, ri.ClassID) {
			continue
		}

		ln := len(related.R.ScheduleDetails)
		if ln > 1 && i < ln-1 {
			related.R.ScheduleDetails[i] = related.R.ScheduleDetails[ln-1]
		}
		related.R.ScheduleDetails = related.R.ScheduleDetails[:ln-1]
		break
	}
	return nil
}

// SetTrainer of the scheduleDetail to the related item.
// Sets o.R.Trainer to related.
// Adds o to related.R.ScheduleDetails.
func (o *ScheduleDetail) SetTrainer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Trainer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"schedule_detail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"trainer_id"}),
		strmangle.WhereClause("\"", "\"", 2, scheduleDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TrainerID, related.ID)
	if o.R == nil {
		o.R = &scheduleDetailR{
			Trainer: related,
		}
	} else {
		o.R.Trainer = related
	}

	if related.R == nil {
		related.R = &trainerR{
			ScheduleDetails: ScheduleDetailSlice{o},
		}
	} else {
		related.R.ScheduleDetails = append(related.R.ScheduleDetails, o)
	}

	return nil
}

// RemoveTrainer relationship.
// Sets o.R.Trainer to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ScheduleDetail) RemoveTrainer(ctx context.Context, exec boil.ContextExecutor, related *Trainer) error {
	var err error

	queries.SetScanner(&o.TrainerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("trainer_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Trainer = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ScheduleDetails {
		if queries.Equal(o.TrainerID, ri.TrainerID) {
			continue
		}

		ln := len(related.R.ScheduleDetails)
		if ln > 1 && i < ln-1 {
			related.R.ScheduleDetails[i] = related.R.ScheduleDetails[ln-1]
		}
		related.R.ScheduleDetails = related.R.ScheduleDetails[:ln-1]
		break
	}
	return nil
}

// ScheduleDetails retrieves all the records using an executor.
func ScheduleDetails(mods ...qm.QueryMod) scheduleDetailQuery {
	mods = append(mods, qm.From("\"schedule_detail\""))
	return scheduleDetailQuery{NewQuery(mods...)}
}

// FindScheduleDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindScheduleDetail(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ScheduleDetail, error) {
	scheduleDetailObj := &ScheduleDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"schedule_detail\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, scheduleDetailObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from schedule_detail")
	}

	return scheduleDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ScheduleDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no schedule_detail provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scheduleDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	scheduleDetailInsertCacheMut.RLock()
	cache, cached := scheduleDetailInsertCache[key]
	scheduleDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			scheduleDetailColumns,
			scheduleDetailColumnsWithDefault,
			scheduleDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(scheduleDetailType, scheduleDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(scheduleDetailType, scheduleDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"schedule_detail\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"schedule_detail\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into schedule_detail")
	}

	if !cached {
		scheduleDetailInsertCacheMut.Lock()
		scheduleDetailInsertCache[key] = cache
		scheduleDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ScheduleDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ScheduleDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	scheduleDetailUpdateCacheMut.RLock()
	cache, cached := scheduleDetailUpdateCache[key]
	scheduleDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			scheduleDetailColumns,
			scheduleDetailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update schedule_detail, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"schedule_detail\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, scheduleDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(scheduleDetailType, scheduleDetailMapping, append(wl, scheduleDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update schedule_detail row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for schedule_detail")
	}

	if !cached {
		scheduleDetailUpdateCacheMut.Lock()
		scheduleDetailUpdateCache[key] = cache
		scheduleDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q scheduleDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for schedule_detail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for schedule_detail")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ScheduleDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scheduleDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"schedule_detail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, scheduleDetailPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in scheduleDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all scheduleDetail")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ScheduleDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no schedule_detail provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scheduleDetailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	scheduleDetailUpsertCacheMut.RLock()
	cache, cached := scheduleDetailUpsertCache[key]
	scheduleDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			scheduleDetailColumns,
			scheduleDetailColumnsWithDefault,
			scheduleDetailColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			scheduleDetailColumns,
			scheduleDetailPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert schedule_detail, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(scheduleDetailPrimaryKeyColumns))
			copy(conflict, scheduleDetailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"schedule_detail\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(scheduleDetailType, scheduleDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(scheduleDetailType, scheduleDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert schedule_detail")
	}

	if !cached {
		scheduleDetailUpsertCacheMut.Lock()
		scheduleDetailUpsertCache[key] = cache
		scheduleDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ScheduleDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ScheduleDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ScheduleDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), scheduleDetailPrimaryKeyMapping)
	sql := "DELETE FROM \"schedule_detail\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from schedule_detail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for schedule_detail")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q scheduleDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no scheduleDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from schedule_detail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for schedule_detail")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ScheduleDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ScheduleDetail slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(scheduleDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scheduleDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"schedule_detail\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, scheduleDetailPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from scheduleDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for schedule_detail")
	}

	if len(scheduleDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ScheduleDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindScheduleDetail(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScheduleDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ScheduleDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scheduleDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"schedule_detail\".* FROM \"schedule_detail\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, scheduleDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ScheduleDetailSlice")
	}

	*o = slice

	return nil
}

// ScheduleDetailExists checks if the ScheduleDetail row exists.
func ScheduleDetailExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"schedule_detail\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if schedule_detail exists")
	}

	return exists, nil
}
