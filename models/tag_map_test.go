// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTagMaps(t *testing.T) {
	t.Parallel()

	query := TagMaps()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTagMapsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TagMap{}
	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTagMapsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TagMap{}
	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TagMaps().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTagMapsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TagMap{}
	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TagMapSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTagMapsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TagMap{}
	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TagMapExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TagMap exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TagMapExists to return true, but got false.")
	}
}

func testTagMapsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TagMap{}
	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tagMapFound, err := FindTagMap(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tagMapFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTagMapsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TagMap{}
	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TagMaps().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTagMapsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TagMap{}
	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TagMaps().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTagMapsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagMapOne := &TagMap{}
	tagMapTwo := &TagMap{}
	if err = randomize.Struct(seed, tagMapOne, tagMapDBTypes, false, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}
	if err = randomize.Struct(seed, tagMapTwo, tagMapDBTypes, false, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tagMapOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tagMapTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TagMaps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTagMapsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tagMapOne := &TagMap{}
	tagMapTwo := &TagMap{}
	if err = randomize.Struct(seed, tagMapOne, tagMapDBTypes, false, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}
	if err = randomize.Struct(seed, tagMapTwo, tagMapDBTypes, false, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tagMapOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tagMapTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tagMapBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TagMap) error {
	*o = TagMap{}
	return nil
}

func tagMapAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TagMap) error {
	*o = TagMap{}
	return nil
}

func tagMapAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TagMap) error {
	*o = TagMap{}
	return nil
}

func tagMapBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TagMap) error {
	*o = TagMap{}
	return nil
}

func tagMapAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TagMap) error {
	*o = TagMap{}
	return nil
}

func tagMapBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TagMap) error {
	*o = TagMap{}
	return nil
}

func tagMapAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TagMap) error {
	*o = TagMap{}
	return nil
}

func tagMapBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TagMap) error {
	*o = TagMap{}
	return nil
}

func tagMapAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TagMap) error {
	*o = TagMap{}
	return nil
}

func testTagMapsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TagMap{}
	o := &TagMap{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tagMapDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TagMap object: %s", err)
	}

	AddTagMapHook(boil.BeforeInsertHook, tagMapBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tagMapBeforeInsertHooks = []TagMapHook{}

	AddTagMapHook(boil.AfterInsertHook, tagMapAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tagMapAfterInsertHooks = []TagMapHook{}

	AddTagMapHook(boil.AfterSelectHook, tagMapAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tagMapAfterSelectHooks = []TagMapHook{}

	AddTagMapHook(boil.BeforeUpdateHook, tagMapBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tagMapBeforeUpdateHooks = []TagMapHook{}

	AddTagMapHook(boil.AfterUpdateHook, tagMapAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tagMapAfterUpdateHooks = []TagMapHook{}

	AddTagMapHook(boil.BeforeDeleteHook, tagMapBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tagMapBeforeDeleteHooks = []TagMapHook{}

	AddTagMapHook(boil.AfterDeleteHook, tagMapAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tagMapAfterDeleteHooks = []TagMapHook{}

	AddTagMapHook(boil.BeforeUpsertHook, tagMapBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tagMapBeforeUpsertHooks = []TagMapHook{}

	AddTagMapHook(boil.AfterUpsertHook, tagMapAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tagMapAfterUpsertHooks = []TagMapHook{}
}

func testTagMapsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TagMap{}
	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTagMapsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TagMap{}
	if err = randomize.Struct(seed, o, tagMapDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tagMapColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTagMapToOneTagUsingTag(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TagMap
	var foreign Tag

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tagMapDBTypes, true, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TagID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tag().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TagMapSlice{&local}
	if err = local.L.LoadTag(ctx, tx, false, (*[]*TagMap)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tag = nil
	if err = local.L.LoadTag(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTagMapToOneSetOpTagUsingTag(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TagMap
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tagMapDBTypes, false, strmangle.SetComplement(tagMapPrimaryKeyColumns, tagMapColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tag{&b, &c} {
		err = a.SetTag(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TagMaps[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TagID, x.ID) {
			t.Error("foreign key was wrong value", a.TagID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TagID))
		reflect.Indirect(reflect.ValueOf(&a.TagID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TagID, x.ID) {
			t.Error("foreign key was wrong value", a.TagID, x.ID)
		}
	}
}

func testTagMapToOneRemoveOpTagUsingTag(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TagMap
	var b Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tagMapDBTypes, false, strmangle.SetComplement(tagMapPrimaryKeyColumns, tagMapColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTag(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTag(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Tag().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Tag != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TagID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TagMaps) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTagMapsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TagMap{}
	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTagMapsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TagMap{}
	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TagMapSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTagMapsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TagMap{}
	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TagMaps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tagMapDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `ID`: `uuid`, `Resource`: `character varying`, `ResourceID`: `uuid`, `TagID`: `uuid`, `UpdatedAt`: `timestamp with time zone`}
	_             = bytes.MinRead
)

func testTagMapsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tagMapPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tagMapColumns) == len(tagMapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TagMap{}
	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTagMapsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tagMapColumns) == len(tagMapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TagMap{}
	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tagMapDBTypes, true, tagMapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tagMapColumns, tagMapPrimaryKeyColumns) {
		fields = tagMapColumns
	} else {
		fields = strmangle.SetComplement(
			tagMapColumns,
			tagMapPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TagMapSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTagMapsUpsert(t *testing.T) {
	t.Parallel()

	if len(tagMapColumns) == len(tagMapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TagMap{}
	if err = randomize.Struct(seed, &o, tagMapDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TagMap: %s", err)
	}

	count, err := TagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tagMapDBTypes, false, tagMapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TagMap struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TagMap: %s", err)
	}

	count, err = TagMaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
